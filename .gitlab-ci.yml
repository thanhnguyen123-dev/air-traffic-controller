image: comp23002024/2310-assignment-2

variables:
  backticks: "```" 
  single_backtick: "`" 

stages:
  - filecheck
  - build
  - test
  - render


statement-of-originality:
  image: comp23002024/2310-assignment-1
  stage: filecheck
  allow_failure: true
  tags:
    - comp2300
  artifacts:
    when: always
    paths:
      - references.md
    reports:
      dotenv: student.env
  script:
    - python3 /scripts/validate.py get-student statement-of-originality.md
    - python3 /scripts/validate.py get-content statement-of-originality.md -C references.md
    - python3 /scripts/validate.py schema ./statement-of-originality.md https://comp.anu.edu.au/courses/comp2310/assets/schemas/soo-md.json
    - RES=0
    - python3 /scripts/validate.py different references.md -F /data/assignment-2/base/references.md || RES=1
    - if [ "${RES}" != "0" ]; then  
    -  echo "You haven't updated the 'References' section of your statement of originality."
    -  echo "If you are certain there is nothing you need to add, remove the default value."
    -  exit 1
    - fi

build:controller:
  allow_failure: true
  stage: build
  tags:
    - comp2300
  artifacts:
    when: always
    paths:
      - tests/
      - controller
      - run_tests.sh
      - send_requests.sh
  script:
    - cp -f -r /data/assignment-2/tests "$CI_PROJECT_DIR/tests"
    - cp -f -r /data/assignment-2/base/run_tests.sh "$CI_PROJECT_DIR/run_tests.sh"
    - cp -f -r /data/assignment-2/base/send_requests.sh "$CI_PROJECT_DIR/send_requests.sh"
    - make clean
    - make controller

.test:run-test:
  allow_failure: true
  stage: test
  needs:
    - job: build:controller
      artifacts: true
  tags:
    - comp2300
  script:
    - TEST_FILE="${TEST_NAME}-results.txt"
    - touch ${TEST_FILE}
    - printf "%s\n" "Running test ${TEST_NAME}"
    - RETCODE=0
    - touch ${TEST_FILE}
    - ./run_tests.sh -n -t ${TEST_NAME} > ${TEST_FILE} 2>&1 || RETCODE=$?
    - printf "%s\n" "Result of running test ${TEST_NAME}:"
    - cat ${TEST_FILE}
    - >
      if [ "${RETCODE}" != "0" ]; then 
        exit 1
      fi

test:basic-1:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-1"
  artifacts:
    when: always
    paths: 
      - "basic-1-results.txt"
  extends: .test:run-test

test:basic-2:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-2"
  artifacts:
    when: always
    paths: 
      - "basic-2-results.txt"
  extends: .test:run-test


test:basic-3:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-3"
  artifacts:
    when: always
    paths: 
      - "basic-3-results.txt"
  extends: .test:run-test


test:basic-4:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-4"
  artifacts:
    when: always
    paths: 
      - "basic-4-results.txt"
  extends: .test:run-test


test:basic-5:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-5"
  artifacts:
    when: always
    paths: 
      - "basic-5-results.txt"
  extends: .test:run-test


test:basic-6:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "basic-6"
  artifacts:
    when: always
    paths: 
      - "basic-6-results.txt"
  extends: .test:run-test

test:multi-1:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "multi-1"
  artifacts:
    when: always
    paths: 
      - "multi-1-results.txt"
  extends: .test:run-test


test:multi-2:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "multi-1"
  artifacts:
    when: always
    paths: 
      - "multi-2-results.txt"
  extends: .test:run-test


test:concurrent-1:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "concurrent-1"
  artifacts:
    when: always
    paths: 
      - "concurrent-1-results.txt"
  extends: .test:run-test


test:concurrent-2:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "concurrent-2"
  artifacts:
    when: always
    paths: 
      - "concurrent-2-results.txt"
  extends: .test:run-test


test:concurrent-3:
  allow_failure: true
  timeout: 5 minutes
  stage: test
  tags:
    - comp2300
  needs:
    - job: build:controller
      artifacts: true
  variables:
    TEST_NAME: "concurrent-3"
  artifacts:
    when: always
    paths: 
      - "concurrent-3-results.txt"
  extends: .test:run-test


report:
  stage: filecheck
  allow_failure: true
  tags:
    - comp2300
  script:
    - python3 /scripts/validate.py exists report.md
    - var="$(cat report.md | wc -w)"
    - >
      echo "Word Count: $var"
    - > 
      if (( $var > 300)); then
          if (( $var > 4000)); then
            echo "Your report should be <= 4000 words!";
            exit 1;
          else
            exit 0;
          fi
      else
        echo "Your report should probably be more than 300 words!";
        exit 1;
      fi

pdf:
  stage: render
  tags:
    - comp2300
  image:
    name: comp23002024/comp2300-md2pdf
  needs:
    - job: test:basic-1
      artifacts: true
    - job: test:basic-2
      artifacts: true
    - job: test:basic-3
      artifacts: true
    - job: test:basic-4
      artifacts: true
    - job: test:basic-5
      artifacts: true
    - job: test:basic-6
      artifacts: true
    - job: test:multi-1
      artifacts: true
    - job: test:multi-2
      artifacts: true
    - job: test:concurrent-1
      artifacts: true
    - job: test:concurrent-2
      artifacts: true
    - job: test:concurrent-3
      artifacts: true
    - job: statement-of-originality
      artifacts: true
  variables:
    PDF_NAME: 'assignment-2-results.pdf'
  artifacts:
    paths:
      - $PDF_NAME
    when: always
  script:
    - touch pdf.md

    # Build pdf.md
    ## Preamble
    - echo "---" > pdf.md
    - echo "pdf_options:" >> pdf.md
    - |
      echo "  displayHeaderFooter: false" >> pdf.md
    - |
      echo "  format: A4" >> pdf.md
    - |
      echo "  margin: 25mm" >> pdf.md
    - |
      echo "  printBackground: true" >> pdf.md
    - |
      echo "css: |-" >> pdf.md
    - |
      echo "  .page-break { page-break-after: always; }"
    - echo "---" >> pdf.md

    - echo $PDF_NAME
    - echo $STUDENT_NAME
    - echo $STUDENT_UID
    - cat references.md

    - echo "## Student Details" >> pdf.md
    - > 
      echo "- **uid**: $STUDENT_UID" >> pdf.md
    - > 
      echo "- **name**: $STUDENT_NAME" >> pdf.md
    - echo "" >> pdf.md

    ## References
    - echo "" >> pdf.md
    - cat references.md >> pdf.md
    - echo "" >> pdf.md

    # Report 
    - echo "<div class='page-break'> </div>" >> pdf.md
    - echo "" >> pdf.md
    - cat report.md >> pdf.md
    - echo "" >> pdf.md
    - echo "" >> pdf.md

    - echo "## Test Results" >> pdf.md

    - TEST_NAMES="basic-1 basic-2 basic-3 basic-4 basic-5 basic-6 multi-1 multi-2 concurrent-1 concurrent-2 concurrent-3"
    - for test_name in ${TEST_NAMES}; do
    -   RESULT_FILE="${test_name}-results.txt"
    -   touch ${RESULT_FILE}
    -   printf "%s\n\n" "## Test ${test_name}" >> pdf.md
    -   printf "%s\n" "${backticks}" >> pdf.md
    -   cat ${RESULT_FILE} >> pdf.md
    -   printf "%s\n\n" "${backticks}" >> pdf.md
    - done
    - printf "\n\n" >> pdf.md

    - cat pdf.md
    # Render
    - | 
      md-to-pdf --launch-options '{ "args": ["--no-sandbox"] }' \
                --highlight-style 'vs2015' \
                --document-title "$assignment_name" \
                --css 'body { font-family: helvetica }'  \
                pdf.md
    - mv pdf.pdf "$PDF_NAME"
